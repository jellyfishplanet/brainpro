<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id=")dq$HV-,B@y90Vi^v%{x" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="+~1r}0Ju))?Rh8(p*71Q" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Brainpro{" line1="" line2="" line3="    export enum value_level{" line4="        /**" line5="         * 0~35" line6="         */" line7="        //% block=&quot;low&quot;" line8="        low = 35," line9="        /**" line10="         * 35~50" line11="         */" line12="        //% block=&quot;middle&quot;" line13="        middle = 50," line14="        /**" line15="         * 50~65" line16="         */" line17="        //% block=&quot;high&quot;" line18="        high=65" line19="    }" line20="" line21="    //% block=&quot;Attention %level&quot; blockId=&quot;GetAttentionValue&quot;" line22="    export function get_Attention_Value(level:value_level):boolean {" line23="        let value = 0" line24="        let buffer: Buffer = null" line25="        serial.redirectToUSB()" line26="        serial.setBaudRate(BaudRate.BaudRate115200)" line27="        buffer = serial.readBuffer(6)" line28="        buffer = buffer.concat(serial.readBuffer(6))" line29="        if (buffer.length &gt; 0) {" line30="                for (let i = 0; i &lt;= buffer.length - 1; i++) {" line31="                    if (buffer[i] == 170) {" line32="                        buffer = buffer.slice(i);" line33="                        break;" line34="                    }" line35="                }" line36="            }" line37="            if (buffer.length &gt; 6 &amp;&amp; buffer[0] == 170 &amp;&amp; buffer[1] == 0 &amp;&amp; buffer[2] == 0 &amp;&amp; buffer[3] == 0 &amp;&amp; buffer[5] == 85) {" line38="                value = buffer[4]" line39="                buffer = buffer.slice(6)" line40="        }" line41="        switch (level) {" line42="            case value_level.low:" line43="                if (value &lt;= value_level.low)" line44="                    return true" line45="                else" line46="                    return false" line47="            case value_level.middle:" line48="                if (value &lt;= value_level.middle &amp;&amp; value &gt; value_level.low)" line49="                    return true" line50="                else" line51="                    return false" line52="            case value_level.high:" line53="                if (value &lt;= value_level.high &amp;&amp; value &gt; value_level.middle)" line54="                    return true" line55="                else" line56="                    return false" line57="            default:" line58="                return false" line59="        }" line60="    }" line61="}" numlines="62"></mutation></block></statement></block></xml>